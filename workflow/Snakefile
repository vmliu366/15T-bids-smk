from glob import glob
from snakebids import bids
import os 
from shutil import which
from subprocess import check_output
from snakebids import set_bids_spec
set_bids_spec("v0_11_0")

configfile: 'config.yml'
#config.setdefault('output_dir', './output')
#c3d = config["c3d"]
#c4d = config["c4d"]

if not config['input_dir']:
    raise ValueError("Please provide --config input_dir=/path/to/tar/")

if 'subjects' not in config:
    tar_files = glob(os.path.join(config['input_dir'], '*.tar')) # expects the /input/dir to contain .tar
    config['subjects'] = [os.path.splitext(os.path.basename(f))[0] for f in tar_files] # separating & grabbing first element
    config['tarfiles'] = {s: os.path.join(config['input_dir'], f"{s}.tar") for s in config['subjects']} # creating dict of {'sub':'/path/to/sub.tar'}

def out_path(path):
    return os.path.join(config['output_dir'], path)

rule all:
    input:
        niftis=expand(out_path('niftis/sub-{subject}'),subject=config['tarfiles'].keys()),

        flash_bids=expand(bids(
            root=out_path("bids"),
            subject='{subject}',
            datatype='anat',
            acq='3DFLASH',
            suffix='T1w',
            extension="{ext}"),
            subject=config['tarfiles'].keys(),
            ext=['.nii.gz','.json']),

        inv_bids=expand(bids(
            root=out_path("bids"),
            subject="{subject}",
            datatype="anat",
            acq="mp2rage",
            inv="{inversions}",
            suffix="MP2RAGE",
            extension="{ext}"),
            subject=config['tarfiles'].keys(),
            inversions=['1','2'],
            ext=['.nii.gz', '.json']),
        uni_bids=expand(bids(
            root=out_path("bids"),
            subject='{subject}',
            datatype='anat',
            acq='mp2rage',
            desc='UNI',
            suffix='T1w',
            extension='{ext}'),
            subject=config['tarfiles'].keys(),
            ext=['.nii.gz', '.json']),

        mt_bids=expand(bids(root=out_path('bids'),
                subject='{subject}',
                acq='{acq}',
                datatype='anat',
                suffix='MTsat',
                extension='{ext}'),
                subject=config['tarfiles'].keys(),
                acq=['T1w', 'PDw', 'MTw'],
                ext=['.nii.gz', '.json']),
        mtr_bids=expand(bids(root=out_path('derivatives'),
                subject='{subject}',
                desc='QUIT',
                acq='3DGRE',
                suffix='MTRmap',
                extension='{ext}'),
                subject=config['tarfiles'].keys(),
                ext=['.nii.gz','.json']),
        dd=out_path('bids/dataset_description.json')

checkpoint extract_tar:
    input:
        tarfile = lambda wildcards: config['tarfiles'][wildcards.subject]
    output:
        directory(out_path('dicoms/sub-{subject}'))
    shell: 
        'mkdir -p {output} && tar -C {output} -xvf {input}'

checkpoint dcm_to_nii:
    input:
        out_path('dicoms/sub-{subject}')
    output:
        directory(out_path('niftis/sub-{subject}'))
    shell:
        "mkdir -p {output} && dcm2niix -f '%s_%d' -o {output} -d 9 {input}"

rule clean_extra_bids:
    input:
        dd='resources/dataset_description.json',
        ignore='resources/bidsignore'
    output:
        dd=out_path('bids/dataset_description.json'),
        ignore=out_path('bids/.bidsignore')
    shell:
        'cp {input.dd} {output.dd} && '
        'cp {input.ignore} {output.ignore}'

for module in config['modules']:
    include: f"rules/{module}.smk"
